---
title: "Literate Programming"
subtitle: "2023 DSS Bootcamp"
author: "Colin Rundel"
institute: ""
date: "08-25-22"
format: 
  revealjs:
    self-contained: true
    slide-number: true
    highlight-style: a11y
    theme: [default, custom.scss]
execute:
  echo: true
---

# R, RMarkdown, and Quarto

## What is markdown?

- Markdown is a lightweight markup language for creating HTML (and other formatted) 
documents.

- Markup languages are designed to produce documents from human readable 
text (and annotations).

- Some of you may be familiar with LaTeX. This is another (less human 
friendly) markup language for creating pdf documents.

- Why markdown is great:

  - Easy to learn and use.
  - Focus on **content**, rather than **coding** and debugging **errors**.
  - Once you have the basics down, you can get fancy via HTML, JavaScript, 
    and CSS.
  - Used by RMarkdown, Jupyter Notebooks, and Quarto
  
    


 
## What is Quarto?

::: center
<p><a href="https://www.rstudio.com/conference/2023/keynotes/collaborate-with-quarto/?wvideo=7m445b2xot"><img src="https://embed-ssl.wistia.com/deliveries/b4390006aa8890b146341f04e5b319c1cd0f2db1.jpg?image_play_button_size=2x&amp;image_crop_resized=960x540&amp;image_play_button=1&amp;image_play_button_color=4287c7e0" width="800" height="450" style="width: 800px; height: 450px;"></a></p><p><a href="https://www.rstudio.com/conference/2023/keynotes/collaborate-with-quarto/?wvideo=7m445b2xot">rstudio::conf 2023 Keynotes - Hello Quarto</a></p>
:::


## R Markdown / Quarto

:::: {.columns}

::: {.column width='50%'}

  **Something simple**
  <br/><br/>
  ![](images/simple-rmd.png)
:::

::: {.column width='50%'}
**Something fancy**
  <br/><br/>
  ![](images/fancy-rmd.png)
:::

::::



## R Markdown resources

- In RStudio, go to `Help > Cheatsheets` and select
    - R Markdown Cheat Sheet
    - R Markdown Reference Guide
    
- Check out the official R Markdown book: 
  [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/) 
  by Yihui Xie, J. J. Allaire, and Garrett Grolemund
  
- Check out 
  [bookdown: Authoring Books and Technical Documents with R Markdown](https://bookdown.org/yihui/bookdown/) by Yihui Xie.

- Take a look at [RPubs](http://rpubs.com/) web published R Markdown documents.


## Quarto resources

- Much of the syntax is shared with R Markdown - so previous resources are a good place to start

- [quarto.org](https://quarto.org/)

- Tom Mock's [Intro to Quarto webinar](https://jthomasmock.github.io/quarto-2hr-webinar/)

- RStudioConf 2023 workshops

  - [Getting Started with Quarto](https://rstudio-conf-2023.github.io/get-started-quarto/)
  
  - [From R Markdown to Quarto](https://rstudio-conf-2023.github.io/rmd-to-quarto/)


# Quarto / RMarkdown demo


## R packages

- Packages are the fundamental units of reproducible R code. They include
  reusable R functions, the documentation that describes how to use them, 
  and sample data.

- In the following exercises we'll use the `tidyverse` package.

  - The tidyverse is an opinionated collection of R packages designed for 
    data science. All packages share an underlying design philosophy, grammar, 
    and data structures.
  - The core tidyverse packages consists of `ggplot2`, `tibble`, `tidyr`, 
    `readr`, `purrr`, `dplyr`, `stringr`, and `forcats` packages.
    
- This package is already installed for you on the DSS servers. If needed, you
  can install it by running the following in the `Console`:
  ```{r eval=FALSE}
  install.packages("tidyverse")
  ```



## A note on environments

- Your R Markdown / Quarto document and your Console do not share their global environments.

  - This is different than the computational model of Jupyter Notebooks!

- This is good for reproducibility, but can sometimes result in frustrating 
  errors.

- This also means any packages or data needed for your analysis need to be loaded in 
  your R Markdown document as well.



## Unvotes data analysis

To get started,

- open `examples/unvotes.qmd`,

- try Rendering the entire document and examine the results.

- try changing one or more of the selected countries, re-render the document and observe any changes.
  
- commit and push your changes to GitHub (include the newly generated `unvotes.html` file as well)

<br/>


## R Markdown / quarto suggestions

- Remember to name your code chunks

- Familiarize yourself with chunk options (https://yihui.org/knitr/options/)
    - Use global chunk options to reduce duplication
    - Using `#|` syntax enables tab completion for chunk options

- Load packages at the start of a document, generally the chunk after your
  setup chunk

- Familiarize yourself with various output formats: 
  Make slides with `revealjs`, pdfs, books, etc.

::: aside
These slides were made with quarto and `revealjs`.
:::


## R programming resources

- Style

    - [Tidyverse style guide](http://style.tidyverse.org/)
    - [Google's R style guide](https://google.github.io/styleguide/Rguide.html)

- Beginner

    - [swirl](https://swirlstats.com/): swirl teaches you R programming and data science interactively, at your own pace, and right in the R console
    - [R manuals](https://cran.r-project.org/manuals.html)
    - [R for Data Science](https://r4ds.had.co.nz) by Hadley Wickham and 
      Garret Grolemund
    - [R Cookbook](https://www.amazon.com/gp/product/0596809158/ref=as_li_tf_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0596809158&linkCode=as2&tag=cooforr09-20) by Paul Teetor

- Next steps

    - [Advanced R](https://adv-r.hadley.nz/) by Hadley Wickham
    - [R Packages](http://r-pkgs.had.co.nz/) by Hadley Wickham



## More R / RStudio resources

- Some useful resources from RStudio: 
  https://www.rstudio.com/resources/cheatsheets/
  
    - RStudio IDE Cheat Sheet
    - R Markdown Cheat Sheet
    - R Markdown Reference Guide
    - Data Import Cheat Sheet
    - Data Transformation Cheat Sheet
    - Data Visualization Cheat Sheet
    
Some of the above cheat sheets are available in RStudio: `Help > Cheatsheets`







# Jupyter notebook demo




## Why python?

![](images/kd_nuggets.png){fig-align="center" width="80%"}

::: {.aside}
*Source*: <https://www.kdnuggets.com/2020/06/data-science-tools-popularity-animated.html>
:::


## Stack Overflow trends

To see how technologies have trended over time based on use of their 
tags since 2008 we can look at Stack Overflow trends.


![](images/stack_overflow.png){fig-align="center" width="66%"}




## RStudio Workbench + Jupyter

If you return to <https://rstudio.stat.duke.edu> you can launch a new session and select Jupyter Lab as your editor of choice.

<br/><br/>

```{r echo=FALSE, out.width="66%"}
knitr::include_graphics("images/workbench_jupyter.png")
```




## Overview of the notebook

Bimodal interface: edit mode and command mode

. . .

Click in a cell or hit `enter` to enter edit mode

![](images/edit-mode.png){fig-align="center" width="100%"}

When in edit mode you can type code or write text with markdown.

. . .

Hit `esc` to enter command mode
![](images/command_mode.png){fig-align="center" width="100%"}

When in command mode you can make edits to the notebook, but not individual
cells.



## Notebook shortcuts

In **edit** mode:

- `shift + enter` - Run cell and add new cell
- `enter` - Add a line within a cell

. . .

In **command** mode:

- `s` - Save the notebook
- `m` - Change cell to markdown
- `y` - Change cell to code
- `x`, `c`, `v`, `d` - Cut, copy, paste, delete a cell
- `a`, `b` - Add a cell above, below

. . .

The point-and-click interface is also an option to execute these commands.



## Jupyter and Terminal

- Jupyter Lab provides a direct interface to the terminal (similar to RStudio) under Launcher > Other

- Terminal commands can also be included in notebooks by prefixing with `!`, e.g.

```python
!pip install --user statsmodels
```



## Jupyter and Git

- The departmental server has the git jupyter lab [extension](https://github.com/jupyterlab/jupyterlab-git) installed.

- This provides a GUI similar to RStudio's for interacting with Git repositories

- Navigate to a repo's root directory and then switch to the Git pane.



## Unvotes data analysis

To get started,

- open `examples/unvotes.ipynb`,

- Render the entire document by selecting Run > Run All Cells

- Try changing one or more of the selected countries, rerunning the document, observe any changes.

- commit and push your changes to GitHub (include the newly generated `unvotes.html` file as well)
<br/>



## Jupyter notebook versus R Markdown

- Similar to R Markdown, Jupyter notebooks allow you to write code and text in
  one easy to read document that is reproducible and easy to share with others.

- Jupyter notebooks include the text, code *and* computational output.

- A Jupyter notebook does not knit to an HTML, PDF or Word file. However, you
  can embed HTML into a notebook.
  - Exports are possible with packages like `nbcovert`

- For a more detailed comparison see 
  [The First Notebook War](https://yihui.name/en/2018/09/notebook-war/).


## Jupyter notebook + quarto

Quarto was build to unify the scientific publish process across the most commonly used notebook formats and this include Jupyter notebooks.

Specifically, quarto has a couple of neat tricks:

- Render `ipynb` files using the jupyter engine
  ```
  quarto render unvotes.ipynb --execute
  quarto render unvotes.ipynb --execute --to pdf
  ```
  
- Converts between `ipynb` and `qmd` files seamlessly
  ```
  quarto convert unvotes.ipynb
  ```

## Additional Python resources

- Style

    - [PEP 8](https://www.python.org/dev/peps/pep-0008/): standard Python style
    - [PEP 257](https://www.python.org/dev/peps/pep-0257/): documentation
      conventions

- Beginner

   - [Python](https://www.python.org/): official documentation and tutorial
   - [Jupyter](https://jupyter.org/): web notebook interface, reproducible 
     research
   - [A Byte of Python](https://python.swaroopch.com/)
   - [Python Crash Course](https://ehmatthes.github.io/pcc/)
   - [Python Crash Course - Cheat Sheets](https://ehmatthes.github.io/pcc/cheatsheets/README.html)

- Next steps

    - [Python Package Index](https://pypi.org)
    - [Problem Solving with Algorithms and Data Structures using Python](https://runestone.academy/runestone/books/published/pythonds/index.html)


